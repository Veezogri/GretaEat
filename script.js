document.addEventListener("DOMContentLoaded", () => {
    setupEventListeners();
    loadCategories();
    loadCategoryMeals();
    loadMealDetails();
    setupAlphabetButtons();
    setupSearchFunctionality();
    

    // ‚úÖ Ex√©cuter fetchMealsByArea() UNIQUEMENT si on est sur area.html
    if (window.location.href.includes("area.html")) {
        fetchMealsByArea();
    }

    if (window.location.href.includes("areas.html")) {
        LoadAreas();
    }

    if (document.getElementById("random-btn")) {
        setupEventListeners();
    }

    // ‚úÖ Ex√©cuter MealsByIngredient() UNIQUEMENT si on est sur ingredient.html
    if (window.location.href.includes("ingredient.html")) {
        const params = new URLSearchParams(window.location.search);
        const ingredient = params.get("ingredient");
    
        if (ingredient) {
            MealsByIngredient(ingredient);
        } else {
            const mealsContainer = document.getElementById("meals-container");
            if (mealsContainer) {
                mealsContainer.innerHTML = "<p>Aucun ingr√©dient sp√©cifi√©.</p>";
            }
        }
    }
    
});





// üü¢ Fonction pour charger un plat al√©atoire
async function loadRandomMeal() {
    try {
        const response = await fetch("https://www.themealdb.com/api/json/v1/1/random.php");
        const data = await response.json();
        
        if (!data.meals) {
            throw new Error("Aucun plat trouv√©.");
        }

        const meal = data.meals[0];

        // R√©cup√©rer les conteneurs
        const randomContainer = document.getElementById("container-random");
        const searchContainer = document.getElementById("meals-containerSearch");

        if (!randomContainer || !searchContainer) {
            throw new Error("Conteneurs introuvables.");
        }

        // ‚úÖ Si une recherche a √©t√© effectu√©e, on la supprime avant d'afficher un plat al√©atoire
        searchContainer.innerHTML = "";

        // ‚úÖ Effacer le contenu pr√©c√©dent du randomContainer
        randomContainer.innerHTML = "";

        // Cr√©ation d'une nouvelle div pour le plat al√©atoire
        const cardrandom = document.createElement("div");
        cardrandom.classList.add("random-card");

        cardrandom.innerHTML = `
                <h2>${meal.strMeal}</h2>
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
                <p><strong>Cat√©gorie :</strong> ${meal.strCategory}</p>
                <p><strong>Origine :</strong> ${meal.strArea}</p>
                <a href="meal.html?id=${meal.idMeal}">Voir la recette</a>
            
        `;

        // ‚úÖ Ajouter la nouvelle carte au conteneur randomContainer
        randomContainer.appendChild(cardrandom);

    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration du plat al√©atoire :", error);

        const randomContainer = document.getElementById("container-random");
        if (randomContainer) {
            randomContainer.innerHTML = "<p>Une erreur est survenue. Veuillez r√©essayer.</p>";
        }
    }
}


// üü¢ Fonction pour g√©rer les √©v√©nements (ex: bouton random meal)
function setupEventListeners() {
    const randomBtn = document.getElementById("random-btn");
    if (randomBtn) {
        randomBtn.addEventListener("click", loadRandomMeal);
    }
}

// üü¢ Fonction pour charger les cat√©gories
async function loadCategories() {
    try {
        const response = await fetch("https://www.themealdb.com/api/json/v1/1/categories.php");
        const data = await response.json();

        const container = document.getElementById("categories-container");
        if (!container) return;

        container.innerHTML = "";

        if (!data.categories) {
            throw new Error("Aucune cat√©gorie trouv√©e.");
        }

        data.categories.forEach(category => {
            let div = document.createElement("div");
            div.classList.add("category-card");
            div.innerHTML = `
            <a href="categorie.html?category=${encodeURIComponent(category.strCategory)}" class="category-link">
                <img src="${category.strCategoryThumb}" alt="${category.strCategory}">
                <h3>${category.strCategory}</h3></a>
                
            `;
            container.appendChild(div);
        });
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des cat√©gories :", error);
        document.getElementById("categories-container").innerHTML = "<p>Une erreur est survenue lors du chargement des cat√©gories.</p>";
    }
}

// üü¢ Fonction pour charger les plats d'une cat√©gorie sp√©cifique
async function loadCategoryMeals() {
    const mealsContainer = document.getElementById("meals-container");
    
    // V√©rifier si on est bien sur la page categorie.html
    if (!mealsContainer || !window.location.href.includes("categorie.html")) return;

    const params = new URLSearchParams(window.location.search);
    const category = params.get("category");

    if (!category) {
        mealsContainer.innerHTML = "<p>Aucune cat√©gorie sp√©cifi√©e.</p>";
        return;
    }

    try {
        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`);
        const data = await response.json();

        mealsContainer.innerHTML = ""; // Nettoyage du conteneur

        if (!data.meals) {
            mealsContainer.innerHTML = "<p>Aucun plat trouv√© pour cette cat√©gorie.</p>";
            return;
        }

        data.meals.forEach(meal => {
            const mealCard = document.createElement("div");
            mealCard.classList.add("meal-card");
            mealCard.innerHTML = `
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
                <h3>${meal.strMeal}</h3>
                <a href="meal.html?id=${meal.idMeal}" class="BoutonPage">Voir la recette</a>
            `;
            mealsContainer.appendChild(mealCard);
        });

    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plats :", error);
        mealsContainer.innerHTML = "<p>Une erreur est survenue lors de la r√©cup√©ration des plats.</p>";
    }
}


// üü¢ Fonction pour charger les d√©tails d'un plat sp√©cifique
async function loadMealDetails() {
    const params = new URLSearchParams(window.location.search);
    const mealId = params.get("id");

    if (!mealId) {
        const mealContainer = document.getElementById("meal-details");
        if (mealContainer) mealContainer.innerHTML = "<p>Aucun identifiant de plat fourni.</p>";
        return;
    }

    try {
        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealId}`);
        const data = await response.json();

        if (!data.meals) {
            document.getElementById("meal-name").textContent = "Plat non trouv√©";
            document.getElementById("meal-details").innerHTML = "<p>Aucun d√©tail disponible pour ce plat.</p>";
            return;
        }

        const meal = data.meals[0];
        document.getElementById("meal-name").textContent = `Recette : ${meal.strMeal}`; ;

        let ingredientsList = "";
        let footerLinks = "";

        for (let i = 1; i <= 20; i++) {
            const ingredient = meal[`strIngredient${i}`];
            const measure = meal[`strMeasure${i}`];
            if (ingredient) {
                ingredientsList += `<li>${ingredient} - ${measure}</li>`;
                footerLinks += `<a href="ingredient.html?ingredient=${encodeURIComponent(ingredient)}" class="btn">${ingredient}</a> `;
            }
        }

        // ‚úÖ V√©rifier que le conteneur existe
        const mealContainer = document.getElementById("meal-details");
        if (!mealContainer) {
            console.error("‚ùå Conteneur 'meal-details' introuvable !");
            return;
        }

        // ‚úÖ Cr√©ation d'une div pour styliser le plat
        const mealcard = document.createElement("div");
        mealcard.classList.add("meal-cardmeal");
        mealcard.innerHTML = `
            <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
            <h3>Cat√©gorie : <a href="categorie.html?category=${encodeURIComponent(meal.strCategory)}">${meal.strCategory}</a></h3>
            <h3>Origine : <a href="area.html?area=${encodeURIComponent(meal.strArea)}">${meal.strArea}</a></h3>
            <h3>Ingr√©dients :</h3>
            <ul>${ingredientsList}</ul>
            <h3>Instructions :</h3>
            <p>${meal.strInstructions}</p>
        `;

        // ‚úÖ Nettoyage et ajout du plat
        mealContainer.innerHTML = "";
        mealContainer.appendChild(mealcard);

        // ‚úÖ Ajout des liens des ingr√©dients dans le footer
        document.getElementById("meal-footer").innerHTML = `
            <h3>Voir d'autres recettes avec ces ingr√©dients :</h3>
            ${footerLinks}
        `;

    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des d√©tails du plat :", error);
        document.getElementById("meal-name").textContent = "Erreur";
        document.getElementById("meal-details").innerHTML = "<p>Une erreur s'est produite lors de la r√©cup√©ration des d√©tails du plat.</p>";
    }
}




// üü¢ Fonction pour initialiser les boutons de l'alphabet
function setupAlphabetButtons() {
    const alphabetContainer = document.getElementById("alphabet-container");
    if (!alphabetContainer) return; // V√©rifier si l'√©l√©ment existe

    const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    alphabet.forEach(letter => {
        const letterButton = document.createElement("button");
        letterButton.textContent = letter;
        letterButton.classList.add("alphabet-button");
        letterButton.addEventListener("click", () => fetchMealsByFirstLetter(letter));
        alphabetContainer.appendChild(letterButton);
    });
}

// üü¢ Fonction asynchrone pour r√©cup√©rer les plats par premi√®re lettre
async function fetchMealsByFirstLetter(letter) {
    try {
        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?f=${letter}`);
        const data = await response.json();

        const mealsContainer = document.getElementById("meals-container");
        if (!mealsContainer) return; // V√©rifier si l'√©l√©ment existe

        mealsContainer.innerHTML = ""; // Vider le conteneur avant d'ajouter du contenu

        if (!data.meals) {
            mealsContainer.innerHTML = "<p>Aucun plat trouv√© pour cette lettre.</p>";
            return;
        }

        // G√©n√©ration des cartes de plats
        data.meals.forEach(meal => {
            const mealCard = document.createElement("div");
            mealCard.classList.add("meal-card");
            mealCard.innerHTML = `
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
                <h3>${meal.strMeal}</h3>
                <a href="meal.html?id=${meal.idMeal}" class="BoutonPage">Voir la recette</a>
            `;
            mealsContainer.appendChild(mealCard);
        });

    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plats :", error);
        document.getElementById("meals-container").innerHTML = "<p>Une erreur s'est produite lors de la r√©cup√©ration des plats.</p>";
    }
}


function setupSearchFunctionality() {
    const searchInput = document.getElementById("search-input");
    const searchBtn = document.getElementById("search-btn");
    const mealsContainer = document.getElementById("meals-containerSearch");

    if (!searchInput || !searchBtn || !mealsContainer) return; // V√©rifier si les √©l√©ments existent

    // √âv√©nement au clic sur le bouton recherche
    searchBtn.addEventListener("click", () => {
        const query = searchInput.value.trim();
        if (query) {
            fetchMealsByName(query);
        } else {
            mealsContainer.innerHTML = "<p>Veuillez entrer un nom de plat √† rechercher.</p>";
        }
    });

    // √âv√©nement pour activer la recherche avec "Entr√©e"
    searchInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            searchBtn.click();
        }
    });
}

// üü¢ Fonction asynchrone pour r√©cup√©rer les plats par nom

async function fetchMealsByName(name) {
    try {
        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${name}`);
        const data = await response.json();

        const mealsContainer = document.getElementById("meals-containerSearch");
        const randomContainer = document.getElementById("container-random");

        if (!mealsContainer || !randomContainer) return;

        // ‚úÖ Si un plat al√©atoire a √©t√© g√©n√©r√©, on l'efface avant d'afficher les r√©sultats de recherche
        randomContainer.innerHTML = "";

        // Nettoyage du conteneur avant affichage des r√©sultats de recherche
        mealsContainer.innerHTML = "";

        if (!data.meals) {
            mealsContainer.innerHTML = "<p>Aucun plat trouv√© pour cette recherche.</p>";
            return;
        }

        // ‚úÖ G√©n√©ration des cartes de plats
        data.meals.forEach(meal => {
            const mealCard = document.createElement("div");
            mealCard.classList.add("meal-card");
            mealCard.innerHTML = `
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
                <h3>${meal.strMeal}</h3>
                <a href="meal.html?id=${meal.idMeal}" class="BoutonPage">Voir la recette</a>
            `;
            mealsContainer.appendChild(mealCard);
        });

    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plats :", error);
        document.getElementById("meals-containerSearch").innerHTML = "<p>Une erreur s'est produite lors de la r√©cup√©ration des plats.</p>";
    }
}



// üü¢ Fonction pour lister les zones g√©ographiques 
async function LoadAreas() {
    try {
        const response = await fetch("https://www.themealdb.com/api/json/v1/1/list.php?a=list");
        const data = await response.json();

        const areasContainer = document.getElementById("areas-container");
        if (!areasContainer) return;

        areasContainer.innerHTML = "";

        if (!data.meals) {
            areasContainer.innerHTML = "<p>Aucune zone trouv√©e.</p>";
            return;
        }

        data.meals.forEach(area => {
            const areaCard = document.createElement("div");
            areaCard.classList.add("area-card");

            // ‚úÖ Cr√©ation d'un lien <a> qui redirige vers area.html
            const areaLink = document.createElement("a");
            areaLink.href = `area.html?area=${encodeURIComponent(area.strArea)}`;
            areaLink.textContent = area.strArea;
            areaLink.classList.add("area-link");

            areaCard.appendChild(areaLink);
            areasContainer.appendChild(areaCard);
        });

    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des zones :", error);
        document.getElementById("areas-container").innerHTML = "<p>Une erreur s'est produite lors de la r√©cup√©ration des zones.</p>";
    }
}





// üü¢ Fonction pour filter les plats par zone g√©ographique
async function fetchMealsByArea() {
    const params = new URLSearchParams(window.location.search);
    const area = params.get("area");

    if (!area) {
        document.getElementById("meals-container").innerHTML = "<p>Aucune zone s√©lectionn√©e.</p>";
        return;
    }

    try {
        const apiUrl = `https://www.themealdb.com/api/json/v1/1/filter.php?a=${area}`;
        console.log("üì° URL API envoy√©e :", apiUrl); // ‚úÖ V√©rifier l‚ÄôURL envoy√©e √† l‚ÄôAPI

        const response = await fetch(apiUrl);
        const data = await response.json();

        const mealsContainer = document.getElementById("meals-container2");


        const titleheader = document.getElementById("titleheader");
        titleheader.innerHTML = `Plats de la zone s√©lectionn√©e : ${area}`;

        if (!data.meals) {
            mealsContainer.innerHTML += "<p>Aucun plat trouv√© pour cette zone g√©ographique.</p>";
            return;
        }

        data.meals.forEach(meal => {
            const mealCard = document.createElement("div");
            mealCard.classList.add("meal-card2");
            mealCard.innerHTML = `
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
                <h3>${meal.strMeal}</h3>
                <a href="meal.html?id=${meal.idMeal}" class="BoutonPage">Voir la recette</a>
            `;
            mealsContainer.appendChild(mealCard);
        });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des plats :", error);
        document.getElementById("meals-container").innerHTML = "<p>Une erreur s'est produite lors de la r√©cup√©ration des plats.</p>";
    }
}





// üü¢ Fonction pour afficher sous forme de vignettes, les plats appartenant √† un ingr√©dient pass√© en param√®tre dans l‚ÄôURL. 


async function MealsByIngredient(ingredient){
    console.log("Ingr√©dient re√ßu :", ingredient); // ‚úÖ V√©rifier si l‚Äôingr√©dient est bien pass√©

    try{
        const reponse = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${ingredient}`);
        const data = await reponse.json();

        console.log("URL API :", `https://www.themealdb.com/api/json/v1/1/filter.php?i=${ingredient}`); // ‚úÖ V√©rifier l'URL de la requ√™te
        console.log("Donn√©es API :", data); // ‚úÖ V√©rifier la r√©ponse API

        const mealsContainer = document.getElementById("meals-container");
        if (!mealsContainer) return;

        mealsContainer.innerHTML = "";

        if (!data.meals) {
            mealsContainer.innerHTML = "<p>Aucun plat trouv√© pour cet ingr√©dient.</p>";
            return;
        }

        data.meals.forEach(meal => {
            const mealCard = document.createElement("div");
            mealCard.classList.add("meal-card");
            mealCard.innerHTML = `
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
                <h3>${meal.strMeal}</h3>
                <a href="meal.html?id=${meal.idMeal}" class="btn">Voir la recette</a>
            `;
            mealsContainer.appendChild(mealCard);
        });

    }
    catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plats :", error);
        document.getElementById("meals-container").innerHTML = "<p>Une erreur s'est produite lors de la r√©cup√©ration des plats.</p>";
    }
}









